#1番目の関数（fibonacci関数）
#B2: 0b10110010 
#02: 0b00000010 ->  0000010 0110010 -> 2^1 + 2^4 + 2^5 + 2^8 = 306
#01: ローカル変数あり
#21: 00100001 -> 2^0 + 2^5 = 33個
#7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
20: 32
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32.sub
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 0b00011000 -> 2^3 + 2^4=24
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 0b00011000 -> 2^3 + 2^4=24
21: local.set
04: 4
02: block
40: 空のタイプ
02: block
40: 空のタイプ
20: local.get
04: 4
0D: br_if
00: 0
41: i32.const
00: 0
21: local.set
05: 5
20: local.get
03: 3
20: local.get
05: 5
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: 28 0001 1100 -> 2^2+2^3+2^4=28
0C: br
01: 1
0B: end
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 24
21: local.set
06: 6
41: i32.const
01: 1
21: local.set
07: 7
20: local.get
06: 6
21: local.set
08: 8
20: local.get
07: 7
21: local.set
09: 9
20: local.get
08: 8
20: local.get
09: 9
46: i32.eq
21: local.set
0A: 10
41: i32.const
01: 1
21: local.set
0B: 11
20: local.get
0A: 10
20: local.get
0B: 11
71: i32.and
21: local.set
0C: 12
02: block
40: empty?
20: local.get
0C: 12
45: i32.eqz
0D: br_if
00: 0
41: i32.const
01: 1
21: local.set
0D: 13
20: local.get
03: 3
20: local.get
0D: 13
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
1C: 0001 1100 -> 2^2+2^3+2^4 = 28
0C: br
01: 1
0B: end
41: i32.const
00: 0
21: local.set
0E: 14
20: local.get
03; 3
20: local.get
0E: 14
36: i32.store
02: 2
14: 20
41: i32.const
01: 1
21: local.set
0F: 15
20: local.get
03: 3
20: local.get
0F: 15
36: i32.store
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
41: i32.const
01: 1
21: local.set
10: 16
20: local.get
03: 3
20: local.get
10: 10
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
02: block
40: empty
03: loop
40: empty
20: local.get
03: 3
28: i32.load
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
11: 21
20: local.get
03: 3
28: i32.load
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
18: 24 0001 1000 -> 2^3 + 2^4
21: local.set
12: 18
20: local.get
11: 17
21: local.set
13: 19
20: local.get
12: 18 (2*16^0 + 1*16^1)
21: local.set
14: 20
20: local.get
13: 19
20: local.get
14: 20
4C: i32.le_s
21: local.set
15: 21
41: i32.const
01: 1
21: local.set 
16: 22
20: local.get
15: 21
20: local.get
16: 22
71: i32.and
21: local.set 
17: 23
20: local.get
17: 23
45: i32.eqz
0D: br_if
01: 1
20: local.get
03: 3
28: i32.load
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: offset=20
21: local.set
18: 24
20: local.get
03: 3
28: i32.load
02: 2
10: 16
21: local.set
19: 25
20: local.get
18: 24
20: local.get 
19: 25
6A: i32.add 
21: local.set
1A: 26
20: local.get
03; 3
20: local.get
1A: 26
36: i32.store
02: 2 アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
21: local.set
1B: 27
20: local.get
03: 3
20: local.get
1B: 27
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
14: 20
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
1C: 28
20: local.get
03: 3
20: local.get
1C: 28
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
10: 16
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
1D: 20
41: i32.const
01: 1
21: local.set
1E: 30
20: local.get 
1D: 29
20: local.get
1E: 30
6A: i32.add 
21: local.set
1F: 31
20: local.get
03: 3
20: local.get
1F: 31
36: i32.store
02: アラインメント
08: 8
0C: br
00: 0
0B: end
00: unreachable
0B: end
20: local.get
03: 3
28:  i32.load
02: アラインメント
14: 20
21: local.set
20: 32
20: local.get
03: 3
20: local.get
20: 32
36: i32.store
02: アラインメント
1C: 28
0B: end
20: local.get
03: 3
28: i32.load 
02: アラインメント
1C: 28
21: local.set
21: 33
20: local.get
21: 33
0F: return
0B: 終了命令
#2番目の関数 (reverseNumber関数)
#8F: 0b10001111 -> 0001111
#01: 0b00000001 -> 1 0001111 -> 2^0 + 2^1 + 2^2 + 2^3 +2^7 = 143
#01: ローカル変数あり
#10: ローカル変数8個 0001 0000 -> 2^4 = 16
#7F: i32
23: global.get
00: 0
21: local.set
01: 1
41: i32.const
10: 16
21: local.set
02: 2
20: local.get
01: 1
20: local.get
02: 2
6B: i32.sub 
21: local.set
03: 3
20: local.get
03: 3
20: local.get
00: 0
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
41: i32.const
00: 0
21: local.set
04: 4
20: local.get
03: 3
20: local.get
04: 4
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: offset=8
02: block
40: empty
03: loop
40: empty
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
05: 5
20: local.get
05: 5
45: i32.eqz
0D: br_if
01: 1
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
06: 6
41: i32.const
0A: 10
21: local.set
07: 7
20: local.get
06: 6
20: local.get
07: 7
6C: i32.mul
21: local.set
08: 8
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
09: 9
41: i32.const
0A: 10
21: local.set
0A: 10
20: local.get
09: 9
20: local.get
0A: 10
6F: i32.rem_s
21: local.set
0B: 11
20: local.get
08: 8
20: local.get
0B: 11
6A: i32.add
21: local.set
0C: 12
20: local.get
03: 3
20: local.get
0C: 12
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
21: local.set
0D: 13
41: i32.const
0A: 10
21: local.set 
0E: 14
20: local.get
0D: 13
20: local.get
0E: 14
6D: i32.div_s
21: local.set
0F: 15
20: local.get
03: 3
20: local.get
0F: 15
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
0C: br
00: 0
0B: end
00: unreachable
0B: end
20: local.get
03: 3
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
10: 16
20: local.get 
10: 16
0F: return
0B: 終了命令
#3番目の関数(main関数)
#6E: 0b01101110 -> 2^1 + 2^2 + 2^3 + 2^5 + 2^6 = 110
#01: ローカル変数あり
#0C: 00001100 ->  2^2 + 2^3 = 12
#7F: i32
23: global.get
00: 0
21: local.set
00: 0
41: i32.const
10: 16
21: local.set
01: 1
20: local.get
00: 0
20: local.get
01: 1
6B: i32.sub 
21: local.set
02: 2
20: local.get
02: 2
24: global.set
00: 0
41: i32.const
00: 0
21: local.set
03: 3
20: local.get
02: 2
20: local.get
03: 3
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
0C: 12
41: i32.const
0A: 10
21: local.set
04: 4
20: local.get
02: 2
20: local.get
04: 4
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
20: local.get
02: 2
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
08: 8
21: local.set
05: 5
20: local.get
05: 5
10: call
01: 1
21: local.set
06: 6
20: local.get
02: 2
20: local.get
06: 6
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
04: 4
20: local.get
02: 2
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
04: 4
21: local.set
07: 7
20: local.get
07: 7
10: call
02: 2
21: local.set
08: 8
20: local.get 
02: 2
20: local.get
08: 8
36: i32.store
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
00: 9
20: local.get
02: 2
28: i32.load
02: アラインメント 2^n の指数nに入る値。2^2 = 4の倍数のアドレスにのみデータが配置される
00: 0
21: local.set
09: 9
41: i32.const
10: 16
21: local.set
0A: 10
20: local.get
02: 2
20: local.get
0A: 10
6A: i32.add 
21: local.set
0B: 11
20: local.get 
0B: 11
24: global.set
00: 0
20: local.get
09: 9
0F: return
0B: 終了命令